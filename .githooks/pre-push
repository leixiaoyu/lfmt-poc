#!/bin/bash

# LFMT POC Pre-Push Hook
# Enforces local testing before pushing to remote repository
# This prevents CI/CD failures and catches issues early

set -e

echo ""
echo "🔍 LFMT POC Pre-Push Validation"
echo "================================"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${2}${1}${NC}"
}

print_status "Running pre-push validation..." "$YELLOW"
echo ""

# Check if we're in the right directory
if [ ! -f "package.json" ] && [ ! -d "shared-types" ] && [ ! -d "backend/infrastructure" ]; then
    print_status "❌ Error: Not in LFMT POC root directory" "$RED"
    exit 1
fi

# 1. Test shared-types
print_status "📦 Testing shared-types..." "$YELLOW"
cd shared-types

if [ ! -f "package.json" ]; then
    print_status "❌ Error: shared-types/package.json not found" "$RED"
    exit 1
fi

if [ ! -d "node_modules" ]; then
    print_status "⚠️  Installing shared-types dependencies..." "$YELLOW"
    npm install --cache=/tmp/npm-cache
fi

# Run shared-types tests
if npm test; then
    print_status "✅ Shared-types tests passed" "$GREEN"
else
    print_status "❌ Shared-types tests failed" "$RED"
    print_status "Fix the failing tests before pushing" "$RED"
    exit 1
fi

cd ..

# 2. Test backend functions
print_status "⚙️  Testing backend functions..." "$YELLOW"
cd backend/functions

if [ ! -f "package.json" ]; then
    print_status "❌ Error: backend/functions/package.json not found" "$RED"
    exit 1
fi

if [ ! -d "node_modules" ]; then
    print_status "⚠️  Installing function dependencies..." "$YELLOW"
    npm install --cache=/tmp/npm-cache
fi

# Run function tests
if npm test; then
    print_status "✅ Backend function tests passed" "$GREEN"
else
    print_status "❌ Backend function tests failed" "$RED"
    print_status "Fix the failing tests before pushing" "$RED"
    exit 1
fi

# Check test coverage
if npm run test:coverage > /dev/null 2>&1; then
    print_status "✅ Test coverage check passed" "$GREEN"
else
    print_status "❌ Test coverage check failed" "$RED"
    print_status "Ensure 90%+ test coverage" "$RED"
    exit 1
fi

cd ../..

# 3. Test infrastructure
print_status "🏗️  Testing infrastructure..." "$YELLOW"
cd backend/infrastructure

if [ ! -f "package.json" ]; then
    print_status "❌ Error: backend/infrastructure/package.json not found" "$RED"
    exit 1
fi

if [ ! -d "node_modules" ]; then
    print_status "⚠️  Installing infrastructure dependencies..." "$YELLOW"
    npm install --cache=/tmp/npm-cache
fi

# Build infrastructure
if npm run build; then
    print_status "✅ Infrastructure TypeScript compilation passed" "$GREEN"
else
    print_status "❌ Infrastructure TypeScript compilation failed" "$RED"
    exit 1
fi

# Run infrastructure tests
if npm test; then
    print_status "✅ Infrastructure tests passed (20/20)" "$GREEN"
else
    print_status "❌ Infrastructure tests failed" "$RED"
    print_status "Fix the failing tests before pushing" "$RED"
    exit 1
fi

cd ../..

# 4. Run security checks
print_status "🔒 Running security checks..." "$YELLOW"

# Check for hardcoded AWS credentials
if grep -r -E "(aws_access_key_id|aws_secret_access_key|AKIA[0-9A-Z]{16})" --include="*.ts" --include="*.js" --exclude-dir=node_modules . 2>/dev/null; then
    print_status "❌ AWS credentials found in code" "$RED"
    exit 1
fi

# Check for hardcoded passwords in production code
if grep -r -E "password\s*[:=]\s*['\"][^'\"]{8,}['\"]" --include="*.ts" --include="*.js" --exclude-dir=node_modules --exclude="*test*" --exclude="*interface*" --exclude="*types*" . 2>/dev/null; then
    print_status "❌ Hardcoded passwords found in production code" "$RED"
    exit 1
fi

# Check for API tokens and secrets
if grep -r -E "(api_?secret|auth_?token|bearer_?token)\s*[:=]\s*['\"][a-zA-Z0-9]{20,}['\"]" --include="*.ts" --include="*.js" --exclude-dir=node_modules --exclude="*test*" . 2>/dev/null; then
    print_status "❌ API secrets or tokens found in production code" "$RED"
    exit 1
fi

print_status "✅ Security checks passed" "$GREEN"

# 5. Final validation
print_status "🎯 Pre-push validation summary:" "$GREEN"
echo ""
print_status "  ✅ Shared-types tests passed" "$GREEN"
print_status "  ✅ Backend function tests passed (209 tests)" "$GREEN"
print_status "  ✅ Test coverage check passed (90%+ required)" "$GREEN"
print_status "  ✅ Infrastructure TypeScript compilation passed" "$GREEN"
print_status "  ✅ Infrastructure tests passed (20/20)" "$GREEN"
print_status "  ✅ Security checks passed" "$GREEN"
echo ""
print_status "🚀 Ready to push to remote repository!" "$GREEN"
echo ""